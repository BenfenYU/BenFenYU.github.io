---
layout: post
title:  "学习C语言"
date:   2022-10-03 13:20:13 +0800
categories: C
---
做这些教程时，学习C语言。
[https://github.com/SWPFlow/C-Project-Based-Tutorials](https://github.com/SWPFlow/C-Project-Based-Tutorials)

## C语言学习

### . 和 ->

参考  https://www.zhihu.com/question/49164544/answer/479672601

是针对结构体而言的，结构体用点，结构体指针用箭头。

1. 编译器会将p->member变成访问p+offset_member这个内存地址的变量
2. 编译器会将s.member变成访问&s+offset_member这个内存地址的变量

### &和*

&a 是 address of a，即a这个变量的地址；

*a 是 deference a，即把a当作内存地址，间接访问该地址存的值。

### (struct name *)0)->member

(struct name *)0 is casting 0 to pointer to struct name.

(struct name*)0 gives you a struct pointer.

((struct name*)0)->member gives you the member of the struct where the pointer points to.

### sizeof

sizeof 是一个关键字，它是一个编译时运算符，用于判断变量或数据类型的字节大小。

sizeof 运算符可用于获取类、结构、共用体和其他用户自定义数据类型的大小。

返回字节数。

### What’s difference between char s[] and char *s in C?

[https://www.geeksforgeeks.org/whats-difference-between-char-s-and-char-s-in-c/](https://www.geeksforgeeks.org/whats-difference-between-char-s-and-char-s-in-c/)

char s[]，s和s的地址是一码事。

![](https://picx.zhimg.com/80/v2-74c0aa43a1c2afce65795527706012d5_1440w.png?source=d16d100b)

### 关于.h 和 .c的直觉理解

.h 一般被称为头文件，.c 一般被称为目标文件，如果需要编译的程序分布在多个.c中，则需要显式的，向编译器指明都有哪些目标文件需被编译。

头文件，中一般会定义一些函数的声明，不同目标文件共同需要的部分，自己定义的头文件，其他文件中可以用 #include "*.h" 来进行引用，但是可能会出现重复引用的问题，比如，a.h 引用了 b.h，c.h引用了a.h和b.h，则b.h被引用了两遍，编译器会报错，解决办法一般是：

```c
#ifndef SOME_NAME
#define SOME_NAME
/* 头文件的内容 */
#endif
```

相当于是用一个变量名，标志该头文件是第几次被引用。


另一点是和编译相关，来自[这里](https://blog.csdn.net/helloworlddm/article/details/76785397)，编译的步骤是：

1.预处理：编译器以每一个 .c 文件作为单元，首先读这个C文件，发现第一句与第二句是包含.h文件，就会在所有搜索路径中寻找这两个文件，找到之后，就会将相应.h文件中再去处理宏，变量，函数声明，嵌套的.h文件包含等，检测依赖关系，进行宏替换，看是否有重复定义与声明的情况发生，最后将那些文件中 所有的东东全部扫描进这个当前的.c文件中，形成一个中间目标文件。

2.编译阶段，将所有这个中间目标文件的所有变量和函数分配空间，将各个函数编译成二进制码，按照特定目标文件格式生成目标文件，在这种格式的目标文件中进行各个全局变量， 函数的符号描述，将这些二进制码按照一定的标准组织成一个目标文件。

3.连接阶段，将上一步成生的各个目标文件，根据一些参数，连接生成最终的可执行文件，主要的工作就是重定位各个目标文件的函数，变量等，相当于将所有目标文件中的二进制码按一定的规范整理到一个文件中。

## unistd.h
<code>unistd.h</code> 是 C语言 和 C++ 程序设计语言中提供对 POSIX 操作系统 API 的访问功能的头文件的名称。是Unix Standard的缩写。该头文件由 POSIX.1 标准（单一UNIX规范的基础）提出，故所有遵循该标准的操作系统和编译器均应提供该头文件（如 Unix 的所有官方版本，包括 Mac OS X、Linux等）。

对于类Unix系统，<code>unistd.h</code> 中所定义的接口通常都是大量针对系统调用的封装（wrapper functions），如 <code>fork</code>、<code>pipe</code> 以及各种 I/O 原语（<code>read</code>、<code>write</code>、<code>close</code> 等等）。

### lseek
重定位读写文件的位置，原型：
```c
off_t lseek(int fd, off_t offset, int whence);
// 调用举例
lseek(fd, 100, SEEK_SET);
lseek(fd, 20, SEEK_CUR);
lseek(fd, -200, SEEK_END);
```
whence是计算位置的起点，
SEEK_SET： 文件开头
SEEK_CUR： 当前位置
SEEK_END： 文件结尾